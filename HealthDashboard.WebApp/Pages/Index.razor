@page "/"
@using HealthDashboard.WebApp.Interfaces
@using HealthDashboard.WebApp.Services
@using HealthDashboard.WebApp.Components
@using HealthDashboard.WebApp.ViewModels
@using System.Timers
@implements IDisposable

@inject IItemService _itemService;

<div class="home-page__wrapper">

    <ul class="home-page__list">
        @foreach (var group in groups)
        {
            <li>
                <GroupView Group="@group" />
            </li>
        }
    </ul>

    <div class="home-page__menu-wrapper">

        <button class="button home-page__button-refresh" @onclick="RefreshAll" title="Refresh all">
            <SvgIcon SvgUrl="/assets/refresh_icon.svg" />
        </button>

        <div class="home-page__settings-wrapper">

            @if (settingsVisible)
            {

                <div class="home-page__interval-wrapper" title="Refresh interval">

                    <SvgIcon SvgUrl="/assets/interval_icon.svg" />

                    <input type="number" @bind="@RefreshInterval" @bind:event="onchange" min="10" />
                    s
                </div>

                @if (timer.Enabled)
                {
                    <button class="button home-page__button-stop" @onclick="()=>timer.Stop()" title="Stop auto refresh">
                        <SvgIcon SvgUrl="/assets/pause_icon.svg" />
                    </button>
                }
                else
                {
                    <button class="button home-page__button-start" @onclick="()=>timer.Start()" title="Start auto refresh">
                        <SvgIcon SvgUrl="/assets/play_icon.svg" />
                    </button>
                }
            }

            <button class="button home-page__button-settings" @onclick="()=>settingsVisible=!settingsVisible" title="@settingsTooltip">
                <SvgIcon SvgUrl="@settingsIcon" />
            </button>

        </div>

    </div>
</div>

@code {
    GroupViewModel[] groups = [];

    Timer timer = new Timer();

    int RefreshInterval
    {
        get => (int)(timer.Interval / 1000);
        set
        {
            if (value > 0)
                timer.Interval = value * 1000;
        }
    }

    bool settingsVisible;
    string settingsIcon => settingsVisible ? "/assets/right_arrow_icon.svg" : "/assets/menu_icon.svg";
    string settingsTooltip => settingsVisible ? "Hide settings" : "Show settings";

    protected override async Task OnInitializedAsync()
    {
        timer.Interval = 10_000;
        timer.AutoReset = true;
        timer.Elapsed += OnTimerTick;

        groups = await _itemService.GetGroupsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAll();
            timer.Start();
        }
    }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }

    private async Task RefreshAll()
    {
        var items = groups.SelectMany(r => r.Items);

        var options = new ParallelOptions { MaxDegreeOfParallelism = 10 };
        await Parallel.ForEachAsync(
            items,
            options,
            async (item, _) =>
                await InvokeAsync(async () => await _itemService.CheckHealthAsync(item.Name, item.Endpoint))
        );

        if (timer.Enabled)
        {
            timer.Stop();
            timer.Start();
        }
    }

    private async Task UpdateHealth(ItemViewModel item)
    {
        await InvokeAsync(async () => { await _itemService.CheckHealthAsync(item.Name, item.Endpoint); });
    }

    private void OnTimerTick(object? source, ElapsedEventArgs e)
    {
        InvokeAsync(async () => await RefreshAll());
    }

}