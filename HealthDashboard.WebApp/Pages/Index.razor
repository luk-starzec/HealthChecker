@page "/"
@using HealthDashboard.WebApp.Interfaces
@using HealthDashboard.WebApp.Services
@using HealthDashboard.WebApp.Components
@using HealthDashboard.WebApp.ViewModels

@inject IItemService _itemService;
@inject IHistoryService _historyService;

<div class="home-page__wrapper">

    <ul class="home-page__list">
        @foreach (var group in groups)
        {
            <li>
                <GroupView Group="@group" OnShowHistory="HandleShowHistory" />
            </li>
        }
    </ul>

    <div class="home-page__menu-wrapper">

        <button class="button home-page__button-refresh" @onclick="RefreshAll" title="Refresh all">
            <SvgIcon SvgUrl="/assets/refresh_icon.svg" />
        </button>

        <div class="home-page__settings-wrapper">

            @if (settingsVisible)
            {
                <SettingsView />
            }

            <button class="button home-page__button-settings" @onclick="()=>settingsVisible=!settingsVisible" title="@settingsTooltip">
                <SvgIcon SvgUrl="@settingsIcon" />
            </button>

        </div>

    </div>
</div>

@if (historyVisible)
{
    <HistoryView Label="@historyLabel" Logs="@healthLogs" OnClose="()=>historyVisible=false" />
}

@code {
    GroupViewModel[] groups = [];

    bool timerEnabled;
    int timerInterval;

    bool settingsVisible;
    string settingsIcon => settingsVisible ? "/assets/right_arrow_icon.svg" : "/assets/menu_icon.svg";
    string settingsTooltip => settingsVisible ? "Hide settings" : "Show settings";

    bool historyVisible;
    string historyLabel = "";
    Dictionary<DateTime, bool>? healthLogs;

    protected override async Task OnInitializedAsync()
    {
        groups = await _itemService.GetGroupsAsync();
    }

    private async Task RefreshAll()
    {
        var items = groups.SelectMany(r => r.Items);
        await Parallel.ForEachAsync(items, async (item, _) => await InvokeAsync(async () => await _itemService.CheckHealthAsync(item.Name, item.Endpoint)));
    }

    async Task HandleShowHistory(ItemViewModel item)
    {
        historyLabel = $"{item.Label} health history";
        historyVisible = true;
        healthLogs = await Task.Run(() => _historyService.GetLogs(item.Name));
    }
}