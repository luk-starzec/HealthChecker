@using HealthDashboard.WebApp.Interfaces
@using HealthDashboard.WebApp.Services
@implements IDisposable

@inject IHistoryService _historyService;
@inject EventBus _eventBus;

<div class="history__wrapper">

    <div class="history__box">

        <h3 class="history__header">
            @Label
        </h3>

        <button class="history__close-button" @onclick="OnClose" title="Close">
            <SvgIcon SvgUrl="/assets/close_icon.svg" />
        </button>

        @if (logs is null)
        {
            <div class="history__loader">
                Loading...
                <SvgIcon SvgUrl="/assets/loading_icon.svg" />
            </div>
        }
        else
        {
            <table class="history__table">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!logs.Any())
                    {
                        <tr>
                            <td colspan="2" class="history__cell--no-logs">No logs</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var log in logs)
                        {
                            <tr>
                                <td class="@GetStatusCss(log.Value)">@log.Key</td>
                                <td class="@GetStatusCss(log.Value)"> @GetStatusText(log.Value)</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }

    </div>
</div>

<div class="history__mask" @onclick="OnClose">
</div>

@code {
    [Parameter]
    public required string Label { get; set; }

    [Parameter]
    public required string Name { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    Dictionary<DateTime, bool>? logs { get; set; }

    string GetStatusText(bool isHealthy) => isHealthy ? "OK" : "Failed";
    string GetStatusCss(bool isHealthy) => isHealthy ? "history__status-ok" : "history__status-failed";

    protected override void OnInitialized()
    {
        _eventBus.OnHistoryChanged += HandleHistoryChanged;
    }

    void IDisposable.Dispose()
    {
        _eventBus.OnHistoryChanged -= HandleHistoryChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InvokeAsync(LoadLogs);
        }
    }

    async Task LoadLogs()
    {
        logs = await Task.Run(() => _historyService.GetLogs(Name).OrderByDescending(r => r.Key).ToDictionary());

        await InvokeAsync(StateHasChanged);
    }

    void HandleHistoryChanged(string name)
    {
        if (name != Name)
            return;

        InvokeAsync(LoadLogs);
    }
}
