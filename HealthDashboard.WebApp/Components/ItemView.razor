@using HealthDashboard.WebApp.Interfaces
@using HealthDashboard.WebApp.ViewModels
@implements IDisposable

@inject IItemService _itemService;
@inject IHistoryService _historyService;

<div class=@wrapperCss>

    @if (lastCheckVisible)
    {
        <span class="item__label item__label--last-check" title="@lastCheckTooltip">
            @lastCheckText
        </span>
    }

    @if (isChecking)
    {
        <div class="item__loading-icon">
            <SvgIcon SvgUrl="/assets/loading_icon.svg" />
        </div>
    }
    else
    {
        <button class="button  item__button--refresh" @onclick="Refresh" title="Refresh">
            <SvgIcon SvgUrl="/assets/refresh_icon.svg" />
        </button>
    }

    <h3 class="item__header">@Item.Label | @test</h3>

    @if (lastHealthyVisible)
    {
        <div class="item__label item__label--last-healthy" title="@lastHealthyTooltip">
            <SvgIcon SvgUrl="/assets/check_icon.svg" />
            @lastHealthyText
        </div>
    }

    <button class="button item__button--details" @onclick="ShowHistory" title="Show details">
        <SvgIcon SvgUrl="/assets/logs_icon.svg" />
    </button>

</div>

@if (historyVisible)
{
    <HistoryView Label="@Item.Label" Logs="@healthLogs" Close="()=>historyVisible=false" />
}

@code {
    [Parameter]
    public required ItemViewModel Item { get; set; }

    bool isChecking;
    bool isHealthy;
    DateTime? lastCheck;
    DateTime? lastHealthy;

    string wrapperCss => lastCheck.HasValue ?
        (isHealthy ? "item__wrapper item__wrapper--healthy" : "item__wrapper item__wrapper--unhealthy")
        : "item__wrapper";

    bool lastCheckVisible => lastCheck.HasValue;
    string lastCheckText => lastCheck.HasValue ? DateTimeToText(lastCheck.Value) : "";
    string lastCheckTooltip => $"Last check: {lastCheck}";

    bool lastHealthyVisible => !string.IsNullOrEmpty(lastHealthyText) && !isHealthy;
    string lastHealthyText => lastHealthy.HasValue ? DateTimeToText(lastHealthy.Value) : "";
    string lastHealthyTooltip => $"Last healthy: {lastHealthy}";

    bool historyVisible;
    Dictionary<DateTime, bool>? healthLogs;

    string test = "aaa";

    protected override void OnInitialized()
    {
        _itemService.OnHealthChecked += HealthChecked;
        _itemService.OnHealthChecking += HealthChecking;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InvokeAsync(InitFromHistory);
        }
        test = DateTime.Now.ToString("HH:mm:ss");
    }

    void IDisposable.Dispose()
    {
        _itemService.OnHealthChecked -= HealthChecked;
        _itemService.OnHealthChecking -= HealthChecking;
    }

    async Task InitFromHistory()
    {
        isChecking = true;
        StateHasChanged();

        var health = await Task.Run(() => _itemService.GetHealthFromHistory(Item.Name));
        if (health != null)
        {
            isHealthy = health.IsHealthy;
            lastCheck = health.LastCheck;
            lastHealthy = health.LastHealthy;
        }
        isChecking = false;
        StateHasChanged();
    }

    void HealthChecked(string name, bool isHealthy, DateTime lastCheck)
    {
        if (name != Item.Name)
            return;

        this.isHealthy = isHealthy;
        this.lastCheck = lastCheck;

        if (isHealthy)
            lastHealthy = lastCheck;

        isChecking = false;

        StateHasChanged();
    }

    void HealthChecking(string name)
    {
        if (name != Item.Name)
            return;

        isChecking = true;
        StateHasChanged();
    }

    async Task Refresh()
    {
        await _itemService.CheckHealthAsync(Item.Name, Item.Endpoint);
    }

    async Task ShowHistory()
    {
        historyVisible = true;
        healthLogs = await Task.Run(() => _historyService.GetLogs(Item.Name));
    }

    string DateTimeToText(DateTime dateTime)
    {
        var format = dateTime.Date == DateTime.Today ? "HH:mm:ss" : "yyyy-MM-dd HH:mm";
        return dateTime.ToString(format);
    }
}
