@using HealthDashboard.WebApp.Interfaces
@using HealthDashboard.WebApp.ViewModels

@inject IItemService _itemService;
@inject IHistoryService _historyService;

<div class=@wrapperCss>

    @if (!string.IsNullOrEmpty(Item.LastCheckText))
    {
        <span class="item__label item__label--last-check" title="@lastCheckTooltip">
            @Item.LastCheckText
        </span>
    }

    @if (Item.IsChecking)
    {
        <div class="item__loading-icon">
            <SvgIcon SvgUrl="/assets/loading_icon.svg" />
        </div>
    }
    else
    {
        <button class="button  item__button--refresh" @onclick="Refresh" title="Refresh">
            <SvgIcon SvgUrl="/assets/refresh_icon.svg" />
        </button>
    }

    <h3 class="item__header">@Item.Label | @test</h3>

    @if (lastHealthyVisible)
    {
        <div class="item__label item__label--last-healthy" title="@lastHealthyTooltip">
            <SvgIcon SvgUrl="/assets/check_icon.svg" />
            @Item.LastHealthyText
        </div>
    }

    <button class="button item__button--details" @onclick="ShowDetails" title="Show details">
        <SvgIcon SvgUrl="/assets/logs_icon.svg" />
    </button>

</div>

@if (historyVisible)
{
    <HistoryView Label="@Item.Label" Logs="@itemLogs" Close="()=>historyVisible=false" />
}

@code {
    [Parameter]
    public required ItemViewModel Item { get; set; }

    string wrapperCss => Item.LastCheck.HasValue ?
        (Item.IsHealthy ? "item__wrapper item__wrapper--healthy" : "item__wrapper item__wrapper--unhealthy")
        : "item__wrapper";

    string lastCheckTooltip => $"Last check: {Item.LastCheck}";

    bool lastHealthyVisible => !string.IsNullOrEmpty(Item.LastHealthyText) && !Item.IsHealthy;
    string lastHealthyTooltip => $"Last healthy: {Item.LastHealthy}";

    bool historyVisible;
    Dictionary<DateTime, bool> itemLogs = new Dictionary<DateTime, bool>();

    string test = "aaa";

    protected override void OnInitialized()
    {
        _itemService.ItemUpdated += ItemUpdated;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        test = DateTime.Now.ToString("HH:mm:ss");
    }

    private void ItemUpdated(object? sender, ItemViewModel item)
    {
        if (item.Name == Item.Name)
            StateHasChanged();
    }

    public async Task Refresh()
    {
        await _itemService.UpdateHealthAsync(Item);
    }

    void ShowDetails()
    {
        historyVisible = true;
        itemLogs = _historyService.GetLogs(Item.Name);
    }
}
